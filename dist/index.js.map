{"version":3,"file":"index.js","sources":["../src/file-finder/index.ts","../src/tsconfig/index.ts","../src/pathv/index.ts"],"sourcesContent":["import { access, constants } from 'node:fs/promises'\nimport path from 'node:path'\n\nexport async function fileFinder(possibleFileNames: string[], possiblePaths: string[]) {\n    const possibleAbsPaths = possiblePaths.map((_p) => _p.startsWith('/')\n        ? _p\n        : path.resolve(process.cwd(), _p)\n    )\n\n    const possibleFiles = createLoadingOrder(possibleFileNames, possibleAbsPaths)\n\n    return findFile(possibleFiles)\n}\n\nfunction createLoadingOrder(filenames: string[], possibleAbsPaths: string[]) {\n    return possibleAbsPaths\n        .reduce<string[]>((memo, _path) => {\n            memo = memo.concat(filenames.map((_name) => path.resolve(_path, _name)))\n            return memo\n        }, [])\n}\n\nasync function findFile(possibleFiles: string[]) {\n    for await (const file of possibleFiles) {\n        if (await verifyFile(file)) {\n            return file\n        }\n    }\n\n    return null\n}\n\nexport async function verifyFile(_filepath: string) {\n    try {\n        await access(_filepath, constants.R_OK)\n        return true\n    } catch (e) {\n        return false\n    }\n}\n","import { type TsConfigJson } from 'type-fest'\nimport { readFile } from 'node:fs/promises'\nimport { fileFinder } from '../file-finder/index'\nimport path from 'node:path'\n\nexport async function readTsConfig(possiblePaths: string[], possibleFileNames: string[] = ['tsconfig.json']) {\n    const location = await fileFinder(possibleFileNames, possiblePaths)\n    if (!location) return null\n\n    return JSON.parse(await readFile(location, 'utf-8')) as TsConfigJson\n}\n\nexport function isAliasPath(filepath: string, tsconfig: TsConfigJson) {\n    const aliases = findAliases(tsconfig)\n    return Object.keys(aliases)\n        .some((pattern) => filepath.startsWith(pattern.replace('*', '')))\n}\n\nexport function resolveAlias(alias: string, tsconfig: TsConfigJson, projectPath?: string) {\n    const _searchPath = projectPath ?? process.cwd()\n    const aliases = findAliases(tsconfig)\n    const pattern = Object.keys(aliases)\n        .find((_pattern) => alias.startsWith(_pattern.replace('*', '')))!\n    if (!pattern.includes('*')) {\n        return aliases[pattern].map((p) => path.resolve(_searchPath, p))\n    }\n\n    const _input = alias.replace(pattern.replace('*', ''), '')\n    return aliases[pattern]\n        .map((p) => path.resolve(_searchPath, p.replace('*', _input)))\n}\n\nfunction findAliases(tsconfig: TsConfigJson) {\n    return tsconfig ? (tsconfig?.compilerOptions?.paths ?? {}) : {}\n}\n","import path from 'node:path'\nimport { copyFile } from 'node:fs/promises'\nimport { readTsConfig, isAliasPath, resolveAlias } from '../tsconfig/index'\nimport { type TsConfigJson } from 'type-fest'\n\nexport function pathv(relativePath: string) {\n    return relativePath;\n}\n\nexport type PathvInputPathType = 'ABSOLUTE' | 'PROJECT_RELATIVE_OUTSIDE_SOURCE' | 'PROJECT_RELATIVE_IN_SOURCE' | 'ALIAS'\nexport type PathvAnalysis = Record<string, {\n    realRelPath: string\n    relDistPath: string\n    pathvExp: string\n}>\n\nconst rePathvCalls = `(pathv\\\\(('|\")(.*)('|\"))\\\\)`;\nconst rePathvCallsGM = new RegExp(rePathvCalls, 'gm')\nconst rePathvCallsNoFlag = new RegExp(rePathvCalls, '')\n\nfunction findProjectPath(sourceRelativePath: string) {\n    const _src = path.normalize(sourceRelativePath)\n    const cwd = process.cwd()\n    return cwd.endsWith(_src)\n        ? path.resolve(cwd, _src.split('/').map(() => '..').join('/'))\n        : cwd\n}\n\nexport async function processPathvCalls(content: string, fileAbsPath: string, sourceRelativePath: string, distRelativePath: string) {\n    const projectPath = findProjectPath(sourceRelativePath)\n    const tsconfig = await readTsConfig([path.resolve(projectPath, sourceRelativePath), projectPath])\n    const analysis = analysePaths(content, fileAbsPath, projectPath, tsconfig, sourceRelativePath, distRelativePath)\n\n    await distAnalysedFiles(analysis, projectPath)\n\n    return formatSourceContent(content, analysis)\n}\n\nexport function formatSourceContent(content: string, analysis: PathvAnalysis) {\n    return Object.keys(analysis)\n        .reduce<string>(\n            (memo, token) => memo.replace(token, analysis[token].pathvExp),\n            content\n        )\n}\n\nasync function distAnalysedFiles(analysis: PathvAnalysis, projectPath: string) {\n    for await (const { realRelPath, relDistPath } of Object.values(analysis)) {\n        await copyFile(\n            path.resolve(projectPath, realRelPath),\n            path.resolve(projectPath, relDistPath)\n        )\n    }\n}\n\nexport function analysePaths(content: string, fileAbsPath: string, projectPath: string, tsconfig: TsConfigJson | null, sourceRelativePath: string, distRelativePath: string) {\n    const matches = content.match(rePathvCallsGM)\n\n    if (!matches) {\n        return {}\n    }\n\n    const matchesFormatted = matches.map((text) => text.match(rePathvCallsNoFlag))\n    const result: PathvAnalysis = {}\n    for (const _matches of matchesFormatted) {\n        if (!_matches) continue;\n        const input = _matches[3]\n        const inputType = findInputType(input)\n        const realRelPath = findRealRelativePath(input, inputType)\n        const relDistPath = findCorrespondingDistPath(realRelPath, inputType)\n\n        result[_matches[0]] = {\n            realRelPath,\n            relDistPath,\n            pathvExp: `path.resolve(import.meta.dirname, '${'./' + path.relative(distRelativePath, relDistPath)}')`\n        }\n    }\n\n    return result\n\n    function findRealRelativePath(input: string, inputType: PathvInputPathType) {\n        switch (inputType) {\n            case \"PROJECT_RELATIVE_OUTSIDE_SOURCE\":\n                return input\n            case \"PROJECT_RELATIVE_IN_SOURCE\":\n                return input\n            case \"ALIAS\":\n                const resolved = resolveAlias(input, tsconfig!, projectPath)[0]\n                return './' + path.relative(projectPath, resolved)\n            case \"ABSOLUTE\":\n                return input.includes(projectPath)\n                    ? path.relative(path.resolve(projectPath, sourceRelativePath), input)\n                    : input\n        }\n    }\n\n    function findCorrespondingDistPath(projectRelativeFilePath: string, inputType: PathvInputPathType) {\n        if (projectRelativeFilePath.startsWith('/')) {\n            return path.join(projectPath, distRelativePath, projectRelativeFilePath)\n        }\n\n        if (inputType === 'PROJECT_RELATIVE_OUTSIDE_SOURCE') {\n            return './' + path.join(distRelativePath, projectRelativeFilePath)\n        }\n\n        return './' + path.join(\n            distRelativePath,\n            path.relative(sourceRelativePath, projectRelativeFilePath)\n        )\n    }\n\n    function findInputType(input: string): PathvInputPathType {\n        if (input.startsWith('/')) {\n            return 'ABSOLUTE'\n        }\n        else if (tsconfig && isAliasPath(input, tsconfig)) {\n            return 'ALIAS'\n        }\n        else if (path.normalize(input).includes(path.normalize(sourceRelativePath))) {\n            return 'PROJECT_RELATIVE_IN_SOURCE'\n        }\n        else {\n            return 'PROJECT_RELATIVE_OUTSIDE_SOURCE'\n        }\n    }\n}\n"],"names":["fileFinder","possibleFileNames","possiblePaths","possibleAbsPaths","map","_p","startsWith","path","resolve","process","cwd","possibleFiles","createLoadingOrder","findFile","filenames","reduce","memo","_path","concat","_name","file","verifyFile","_filepath","access","constants","R_OK","e","readTsConfig","location","JSON","parse","readFile","isAliasPath","filepath","tsconfig","aliases","findAliases","Object","keys","some","pattern","replace","resolveAlias","alias","projectPath","_searchPath","find","_pattern","includes","p","_input","compilerOptions","paths","pathv","relativePath","rePathvCalls","rePathvCallsGM","RegExp","rePathvCallsNoFlag","findProjectPath","sourceRelativePath","_src","normalize","endsWith","split","join","processPathvCalls","content","fileAbsPath","distRelativePath","analysis","analysePaths","distAnalysedFiles","formatSourceContent","token","pathvExp","realRelPath","relDistPath","values","copyFile","matches","match","matchesFormatted","text","result","_matches","input","inputType","findInputType","findRealRelativePath","findCorrespondingDistPath","relative","resolved","projectRelativeFilePath"],"mappings":"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"}